思路：动态规划

如果我们要求从`4`通过加约数走到`24`需要的最小步数。那么，最少的方法是：`4->6->8->12->18->24`.

那么，显然再这条路径中，从`4->8`和从`8->24`分别的步数也是最优的，即满足最优子结构问题。

那么就开辟一个数组，每一个位置存放到达这个数字需要的最少步数，初始为正无穷。`4`的位置存放为`0`，表示从此开始。

而`4`只有一个约数（非自身和`1`），那么`4`只能更新到达`6`的步数。然后,`6`的约数有`2,3`那么可以更新`8, 9`步数均为`2`.这时候，可以用`8`来更新`10, 12`的步数。并且`8`的最优步数已经知道。

`code:`

```
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

void get_divisor(vector<int>& divisors, int n)
{
	divisors.clear();
	double n_sq = sqrt(n);

	for (int i = 2; i <= n_sq; ++ i)
	{
		if (n % i == 0)
			divisors.push_back(i);
		if (i != n/i)
			divisors.push_back(n/i);
	}
}

int main()
{
	vector<int> num(1E5);
	int lower, upper;

	cin >> lower >> upper;

	num[lower] = 0;
	for (int i = lower+1; i < upper + 1; ++ i)
	{
		num[i] = 0x7FFFFFFF;
	}

	// 每个数字的不包括 1 和它自身的约数
	vector<int> dv;

	for (int i = lower; i < upper; ++ i)
	{
		if (num[i] != 0x7fffffff)
		{
			get_divisor(dv, i);

			for (int j = 0; j < dv.size(); ++ j)
			{
				if (num[i + dv[j]] > num[i] + 1)
					num[i + dv[j]] = num[i] + 1;
			}
		}
	}

	cout << num[upper] << endl;
}
```
