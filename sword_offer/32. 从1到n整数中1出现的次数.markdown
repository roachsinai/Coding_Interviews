[编程之美读书笔记（3） 统计在从1到n的正整数中1出现的次数](http://blog.csdn.net/sjf0115/article/details/8600599)

**拿百位上 1 出现的次数为例，其出现的总次数可以分为两部分：与十位个位上数字相关的出现次数、与千位万位上的数字相关（包括更高位）的出现次数。**

> 设N = abcde ,其中abcde分别为十进制中各位上的数字。
>
> 如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位一下（低位）上的数字，百位一上（高位）上的数字。
>
> 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，.........，11100~11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
>
> 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，.........，11100~11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。
>  
> 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...........，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。

```
/*N = abcde 百位上数字是c
仅以求百位上出现1的情况为例。
*/  
int count = 0;  
//百位上数字为0,百位上可能出现1的次数由更高位决定  
if(c == 0){  
    //等于更高位数字（ab）* 当前位数（100）  
    count += ab*100;  
}  
//百位上数字为1,百位上可能出现1的次数不仅受更高位影响还受低位影响  
else if(c == 1){  
    //更高位数字（ab） *  当前位数（100） + 低位数字（de）+1  
    count += ab*100 + de + 1;  
}  
//百位上数字大于1（2~9）,百位上出现1的情况仅由更高位决定  
else{  
    //（更高位数字+1（ab+1））* 当前位数（100）  
    count += (ab + 1) * 100;  
}
```

---

code:

```
#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n)
    {
        if (n <= 0)
            return 0;

        int leftNum, rightNum, currNum;
        int degree = 1;
        int count = 0;
        while (n / degree != 0)
        {
            rightNum = n % degree;
            leftNum = n / (degree * 10);
            currNum = (n / degree) % 10;

            if (currNum == 0)
                count += leftNum * degree;
            else if (currNum == 1)
                count += (leftNum * degree + rightNum + 1);
            else
                count += (leftNum + 1) * degree;

            degree *= 10;
        }

        return count;
    }
};

int main(int argc, char const *argv[])
{
    Solution s;

    cout << s.NumberOf1Between1AndN_Solution(1000);
    return 0;
}
```
